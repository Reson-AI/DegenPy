#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import requests
import logging
from typing import Dict, Any, Optional
from dotenv import load_dotenv

# 配置日志

# Load environment variables
load_dotenv()

# 配置日志
logger = logging.getLogger("webhook_action")

class WebhookNotifier:
    """
    Send notifications to webhook endpoints
    """
    
    def __init__(self):
        self.webhook_url = os.getenv("WEBHOOK_URL")
        if not self.webhook_url:
            print("Warning: WEBHOOK_URL environment variable not set")
            
    def notify(self, event_type: str, data: Dict[str, Any]) -> bool:
        """
        Send a notification to the webhook
        
        Args:
            event_type: Type of event (content_generated, video_created, etc.)
            data: Event data to send
                
        Returns:
            True if notification was sent successfully, False otherwise
        """
        if not self.webhook_url:
            print("Cannot send webhook: URL not configured")
            return False
            
        try:
            # Prepare the payload
            payload = {
                "event_type": event_type,
                "timestamp": int(__import__("time").time()),
                "data": data
            }
            
            # Send the webhook
            response = requests.post(
                self.webhook_url,
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code >= 200 and response.status_code < 300:
                print(f"Webhook notification sent successfully: {event_type}")
                return True
            else:
                print(f"Failed to send webhook: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"Exception sending webhook: {str(e)}")
            return False

# Singleton instance
notifier = WebhookNotifier()

def send_notification(event_type: str, data: Dict[str, Any]) -> bool:
    """
    Send a notification via webhook
    
    Args:
        event_type: Type of event
        data: Event data
            
    Returns:
        True if notification was sent successfully, False otherwise
    """
    return notifier.notify(event_type, data)

def notify_content_generated(agent_id: str, content: str, trigger_id: str) -> bool:
    """
    Notify that content was generated by an agent
    
    Args:
        agent_id: ID of the agent that generated the content
        content: The generated content
        trigger_id: ID of the trigger that initiated the generation
            
    Returns:
        True if notification was sent successfully, False otherwise
    """
    data = {
        "agent_id": agent_id,
        "content": content,
        "trigger_id": trigger_id
    }
    
    return send_notification("content_generated", data)

def notify_video_created(agent_id: str, content: str, video_url: str, trigger_id: str) -> bool:
    """
    Notify that a video was created
    
    Args:
        agent_id: ID of the agent that generated the content
        content: The text content used to generate the video
        video_url: URL to the generated video
        trigger_id: ID of the trigger that initiated the generation
            
    Returns:
        True if notification was sent successfully, False otherwise
    """
    data = {
        "agent_id": agent_id,
        "content": content,
        "video_url": video_url,
        "trigger_id": trigger_id
    }
    
    return send_notification("video_created", data)

def notify_content_published(platform: str, content_id: str, url: str) -> bool:
    """
    Notify that content was published to a platform
    
    Args:
        platform: The platform where content was published (tiktok, twitter, etc.)
        content_id: ID of the content on the platform
        url: URL to the published content
            
    Returns:
        True if notification was sent successfully, False otherwise
    """
    data = {
        "platform": platform,
        "content_id": content_id,
        "url": url
    }
    
    return send_notification("content_published", data)

class WebhookAction:
    """Webhook通知动作"""
    
    def __init__(self, config):
        self.config = config
        
    def execute(self, context):
        """
        执行Webhook通知
        
        Args:
            context: 上下文
            
        Returns:
            更新后的上下文
        """
        # 获取URL
        url = self.config.get('url', '')
        if url == '{{webhook_url}}':
            url = os.getenv("WEBHOOK_URL", "")
            
        if not url:
            logger.error("未指定webhook URL")
            # 不终止序列，继续执行后续动作
            return context
            
        # 获取内容
        processed_content = context.get('processed_content', '')
        video_task_id = context.get('video_task_id', '')
        agent_id = context.get('agent_id', 'unknown')
        trigger_id = context.get('task_id', 'unknown')
        
        # 准备通知数据
        data = {
            "agent_id": agent_id,
            "content": processed_content,
            "video_task_id": video_task_id,
            "trigger_id": trigger_id,
            "task_type": context.get('task_type', 'unknown'),
            "timestamp": context.get('timestamp', '')
        }
        
        try:
            # 发送通知
            success = send_notification("task_executed", data)
            
            # 更新上下文
            context['webhook_sent'] = success
            
            if success:
                logger.info(f"Webhook通知已发送: {url}")
            else:
                logger.error(f"Webhook通知发送失败: {url}")
                
            return context
            
        except Exception as e:
            logger.error(f"发送Webhook通知时出错: {str(e)}")
            context['webhook_sent'] = False
            return context

if __name__ == "__main__":
    # Example usage
    notify_content_generated(
        agent_id="trump-xbt",
        content="Bitcoin is doing TREMENDOUS things today. Many people are saying it's the BEST cryptocurrency!",
        trigger_id="rule-0"
    )
